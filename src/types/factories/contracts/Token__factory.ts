/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { Token, TokenInterface } from "../../contracts/Token";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c0604052601060809081526f26bc902430b9323430ba102a37b5b2b760811b60a05260009061002f90826101a1565b5060408051808201909152600381526213521560ea1b602082015260019061005790826101a1565b50620f424060025534801561006b57600080fd5b5060025433600081815260046020526040902091909155600380546001600160a01b0319169091179055610260565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052602260045260246000fd5b6002810460018216806100da57607f821691505b6020821081036100ec576100ec6100b0565b50919050565b60006101016100fe8381565b90565b92915050565b610110836100f2565b81546008840282811b60001990911b908116901990911617825550505050565b600061013d818484610107565b505050565b8181101561015d57610155600082610130565b600101610142565b5050565b601f82111561013d576000818152602090206020601f850104810160208510156101885750805b61019a6020601f860104830182610142565b5050505050565b81516001600160401b038111156101ba576101ba61009a565b6101c482546100c6565b6101cf828285610161565b506020601f82116001811461020457600083156101ec5750848201515b600019600885021c198116600285021785555061019a565b600084815260208120601f198516915b828110156102345787850151825560209485019460019092019101610214565b50848210156102515783870151600019601f87166008021c191681555b50505050600202600101905550565b6105788061026f6000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80638da5cb5b116100505780638da5cb5b146100e157806395d89b411461010e578063a9059cbb1461011657600080fd5b806306fdde031461007757806318160ddd1461009557806370a08231146100ab575b600080fd5b61007f61012b565b60405161008c919061034c565b60405180910390f35b61009e60025481565b60405161008c919061036c565b61009e6100b93660046103c0565b73ffffffffffffffffffffffffffffffffffffffff1660009081526004602052604090205490565b6003546101019073ffffffffffffffffffffffffffffffffffffffff1681565b60405161008c91906103f2565b61007f6101b9565b610129610124366004610411565b6101c6565b005b600080546101389061047d565b80601f01602080910402602001604051908101604052809291908181526020018280546101649061047d565b80156101b15780601f10610186576101008083540402835291602001916101b1565b820191906000526020600020905b81548152906001019060200180831161019457829003601f168201915b505050505081565b600180546101389061047d565b33600090815260046020526040902054811115610218576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020f906104a9565b60405180910390fd5b3360009081526004602052604081208054839290610237908490610513565b909155505073ffffffffffffffffffffffffffffffffffffffff82166000908152600460205260408120805483929061027190849061052a565b909155505060405173ffffffffffffffffffffffffffffffffffffffff83169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906102c090859061036c565b60405180910390a35050565b60005b838110156102e75781810151838201526020016102cf565b838111156102f6576000848401525b50505050565b6000610306825190565b80845260208401935061031d8185602086016102cc565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920192915050565b6020808252810161035d81846102fc565b9392505050565b805b82525050565b6020810161037a8284610364565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff821661037a565b6103a781610380565b81146103b257600080fd5b50565b803561037a8161039e565b6000602082840312156103d5576103d5600080fd5b60006103e184846103b5565b949350505050565b61036681610380565b6020810161037a82846103e9565b806103a7565b803561037a81610400565b6000806040838503121561042757610427600080fd5b600061043385856103b5565b925050602061044485828601610406565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60028104600182168061049157607f821691505b6020821081036104a3576104a361044e565b50919050565b6020808252810161037a81601181527f4e6f7420656e6f75676820746f6b656e73000000000000000000000000000000602082015260400190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015610525576105256104e4565b500390565b6000821982111561053d5761053d6104e4565b50019056fea26469706673582212201089cbaab255ddef35ae793d1ece3854eb4c67b7ee1547f4b6749b98d2992aea64736f6c634300080f0033";

type TokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Token__factory extends ContractFactory {
  constructor(...args: TokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Token & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Token__factory {
    return super.connect(runner) as Token__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenInterface {
    return new Interface(_abi) as TokenInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Token {
    return new Contract(address, _abi, runner) as unknown as Token;
  }
}
