/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  TestCounter,
  TestCounterInterface,
} from "../../../contracts/samples/TestCounter";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "CalledFrom",
    type: "event",
  },
  {
    inputs: [],
    name: "count",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "countFail",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "counters",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "repeat",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "gasWaster",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "justemit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "offset",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "xxx",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610462806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063a5e9585f1161005b578063a5e9585f146100a7578063be65ab8c146100dd578063caece693146100fd578063d55565441461010557600080fd5b806306661abd14610082578063278ddd3c1461008c578063a1b4689014610094575b600080fd5b61008a61010e565b005b61008a61013b565b61008a6100a236600461026d565b610174565b6100c76100b53660046102c9565b60016020526000908152604090205481565b6040516100d491906102fa565b60405180910390f35b6100c76100eb36600461033a565b60006020819052908152604090205481565b61008a6101bf565b6100c760025481565b3360009081526020819052604090205461012990600161038a565b33600090815260208190526040902055565b7ffb3b4d6258432a9a3d78dd9bffbcb6cfb1bd94f58da35fd530d08da7d1d058323360405161016a91906103ab565b60405180910390a1565b60015b8381116101b9576002805490600061018e836103b9565b90915550506002546000908152600160205260409020819055806101b1816103b9565b915050610177565b50505050565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f1906103f1565b60405180910390fd5b805b811461020757600080fd5b50565b8035610215816101fa565b92915050565b60008083601f84011261023057610230600080fd5b50813567ffffffffffffffff81111561024b5761024b600080fd5b60208301915083600182028301111561026657610266600080fd5b9250929050565b60008060006040848603121561028557610285600080fd5b6000610291868661020a565b935050602084013567ffffffffffffffff8111156102b1576102b1600080fd5b6102bd8682870161021b565b92509250509250925092565b6000602082840312156102de576102de600080fd5b60006102ea848461020a565b949350505050565b805b82525050565b6020810161021582846102f2565b600073ffffffffffffffffffffffffffffffffffffffff8216610215565b6101fc81610308565b803561021581610326565b60006020828403121561034f5761034f600080fd5b60006102ea848461032f565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000821982111561039d5761039d61035b565b500190565b6102f481610308565b6020810161021582846103a2565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036103ea576103ea61035b565b5060010190565b6020808252810161021581600c81527f636f756e74206661696c6564000000000000000000000000000000000000000060208201526040019056fea2646970667358221220656cb6b5487f63106bd2c9079b486e56f6a7bcff8b9b5208f73eef53de01de8064736f6c634300080f0033";

type TestCounterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestCounterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestCounter__factory extends ContractFactory {
  constructor(...args: TestCounterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TestCounter & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TestCounter__factory {
    return super.connect(runner) as TestCounter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestCounterInterface {
    return new Interface(_abi) as TestCounterInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): TestCounter {
    return new Contract(address, _abi, runner) as unknown as TestCounter;
  }
}
